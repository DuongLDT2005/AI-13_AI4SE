/**
 * @file Booking.applyPaidServices.test.js
 * ‚úÖ Jest unit tests for Booking.applyPaidServices() ‚Äî full coverage (10 test cases)
 */

import Booking from "../src/booking";

// ‚úÖ Danh s√°ch d·ªãch v·ª• m·∫´u (kh√¥ng c·∫ßn mock DB/DAO)
const allServices = [
  { serviceID: 'S1', name: 'Decoration', price: 100 },
  { serviceID: 'S2', name: 'Sound System', price: 200.5 },
  { serviceID: 'S3', name: 'Lighting', price: 50.75 }
];

describe('Booking.applyPaidServices()', () => {
  let booking;

  beforeEach(() => {
    booking = new Booking();
    booking.originalPrice = 1000; // gi√° ban ƒë·∫ßu (base price)
  });

  afterEach(() => {
    booking = null;
  });

  test('1Ô∏è‚É£ Valid single service ‚Äî ƒë√∫ng t·ªïng ti·ªÅn v√† appliedPrice', async () => {
    booking.services = [{ serviceID: 'S1', quantity: 2 }];

    await booking.applyPaidServices(allServices);

    expect(booking.originalPrice).toBe(1200);
    expect(booking.services).toEqual([
      { serviceID: 'S1', quantity: 2, appliedPrice: 200 }
    ]);
  });

  test('2Ô∏è‚É£ Multiple valid services ‚Äî t√≠nh ƒë√∫ng c·ªông d·ªìn nhi·ªÅu d·ªãch v·ª•', async () => {
    booking.services = [
      { serviceID: 'S1', quantity: 1 },
      { serviceID: 'S2', quantity: 2 }
    ];

    await booking.applyPaidServices(allServices);

    const totalAdded = 100 * 1 + 200.5 * 2;
    expect(booking.originalPrice).toBeCloseTo(1000 + totalAdded);
    expect(booking.services).toEqual([
      { serviceID: 'S1', quantity: 1, appliedPrice: 100 },
      { serviceID: 'S2', quantity: 2, appliedPrice: 401 }
    ]);
  });

  test('3Ô∏è‚É£ Service not found ‚Äî throws "Service ID <id> not found."', async () => {
    booking.services = [{ serviceID: 'S99', quantity: 1 }];

    await expect(booking.applyPaidServices(allServices))
      .rejects.toThrow('Service ID S99 not found.');
  });

  test('4Ô∏è‚É£ Service already free ‚Äî throws "Service ID <id> is already free."', async () => {
    booking.services = [{ serviceID: 'S1', quantity: 1 }];
    // ‚úÖ Truy c·∫≠p private #freeServices th√¥ng qua h√†m h·ªó tr·ª£ test
    booking._addFreeServiceForTest('S1');

    await expect(booking.applyPaidServices(allServices))
      .rejects.toThrow('Service ID S1 is already free.');
  });

  test('5Ô∏è‚É£ Empty this.services ‚Äî originalPrice kh√¥ng ƒë·ªïi v√† services v·∫´n l√† []', async () => {
    booking.services = [];

    await booking.applyPaidServices(allServices);

    expect(booking.originalPrice).toBe(1000);
    expect(booking.services).toEqual([]);
  });

  test('6Ô∏è‚É£ Quantity = 0 ‚Äî appliedPrice = 0, kh√¥ng l·ªói', async () => {
    booking.services = [{ serviceID: 'S1', quantity: 0 }];

    await booking.applyPaidServices(allServices);

    expect(booking.originalPrice).toBe(1000);
    expect(booking.services).toEqual([
      { serviceID: 'S1', quantity: 0, appliedPrice: 0 }
    ]);
  });

  test('7Ô∏è‚É£ Negative quantity (edge) ‚Äî ch·∫•p nh·∫≠n gi√° √¢m (‚âà logic hi·ªán t·∫°i)', async () => {
    booking.services = [{ serviceID: 'S1', quantity: -2 }];

    await booking.applyPaidServices(allServices);

    expect(booking.originalPrice).toBe(1000 + 100 * -2); // = 800
    expect(booking.services[0].appliedPrice).toBe(-200);
  });

  test('8Ô∏è‚É£ Decimal price ‚Äî ki·ªÉm tra v·ªõi toBeCloseTo (s·ªë th·ª±c)', async () => {
    booking.services = [{ serviceID: 'S2', quantity: 1 }];

    await booking.applyPaidServices(allServices);

    expect(booking.originalPrice).toBeCloseTo(1200.5, 2);
    expect(booking.services[0].appliedPrice).toBeCloseTo(200.5, 2);
  });

  test('9Ô∏è‚É£ Very large quantity ‚Äî kh√¥ng b·ªã l·ªói s·ªë l·ªõn ho·∫∑c overflow', async () => {
    booking.services = [{ serviceID: 'S1', quantity: 1_000_000 }];

    await booking.applyPaidServices(allServices);

    expect(booking.originalPrice).toBe(1000 + 100 * 1_000_000);
    expect(booking.services[0].appliedPrice).toBe(100_000_000);
  });

  test('üîü Missing serviceID ‚Äî throws "Service ID undefined not found."', async () => {
    booking.services = [{ quantity: 1 }];

    await expect(booking.applyPaidServices(allServices))
      .rejects.toThrow('Service ID undefined not found.');
  });
});
